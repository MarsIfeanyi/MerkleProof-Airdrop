{
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_merkleRoot",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "AlreadyClaimed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "InvalidProofForUser",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AirdropClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_merkleProof",
          "type": "bytes32[]"
        },
        {
          "internalType": "address",
          "name": "claimer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "claimAirdrop",
      "outputs": [
        {
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x60806040523480156200001157600080fd5b5060405162000e6738038062000e678339810160408190526200003491620000a1565b6040518060400160405280600c81526020016b42726964676557617465727360a01b8152506040518060400160405280600381526020016242575360e81b815250816003908162000086919062000160565b50600462000095828262000160565b5050506005556200022c565b600060208284031215620000b457600080fd5b5051919050565b634e487b7160e01b600052604160045260246000fd5b600181811c90821680620000e657607f821691505b6020821081036200010757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200015b57600081815260208120601f850160051c81016020861015620001365750805b601f850160051c820191505b81811015620001575782815560010162000142565b5050505b505050565b81516001600160401b038111156200017c576200017c620000bb565b62000194816200018d8454620000d1565b846200010d565b602080601f831160018114620001cc5760008415620001b35750858301515b600019600386901b1c1916600185901b17855562000157565b600085815260208120601f198616915b82811015620001fd57888601518255948401946001909101908401620001dc565b50858210156200021c5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b610c2b806200023c6000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461014157806370a082311461015457806395d89b411461017d578063a457c2d714610185578063a9059cbb14610198578063dd62ed3e146101ab57600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa5780632049d7a11461010c57806323b872dd1461011f578063313ce56714610132575b600080fd5b6100c16101be565b6040516100ce91906109b9565b60405180910390f35b6100ea6100e5366004610a23565b610250565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a366004610a4d565b61026a565b6100ea61012d366004610ad9565b61041a565b604051601281526020016100ce565b6100ea61014f366004610a23565b61043e565b6100fe610162366004610b15565b6001600160a01b031660009081526020819052604090205490565b6100c1610460565b6100ea610193366004610a23565b61046f565b6100ea6101a6366004610a23565b6104ea565b6100fe6101b9366004610b30565b6104f8565b6060600380546101cd90610b63565b80601f01602080910402602001604051908101604052809291908181526020018280546101f990610b63565b80156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b5050505050905090565b60003361025e818585610523565b60019150505b92915050565b6001600160a01b03821660009081526006602052604081205460ff16156102d95760405163032108ed60e21b815260206004820152601960248201527f596f75206861766520616c726561647920636c61696d6564210000000000000060448201526064015b60405180910390fd5b6040516bffffffffffffffffffffffff19606085901b1660208201526034810183905260009060540160405160208183030381529060405280519060200120905061035b868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506005549150849050610647565b9150816103ab57604051635835ed1d60e01b815260206004820181905260248201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660448201526064016102d0565b6103b5848461065d565b6001600160a01b038416600081815260066020908152604091829020805460ff19166001179055815192835282018590527f650e45f04ef8a0c267b2f78d983913f69ae3a353b2b32de5429307522be0ab55910160405180910390a150949350505050565b60003361042885828561071c565b610433858585610796565b506001949350505050565b60003361025e81858561045183836104f8565b61045b9190610bb3565b610523565b6060600480546101cd90610b63565b6000338161047d82866104f8565b9050838110156104dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102d0565b6104338286868403610523565b60003361025e818585610796565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105855760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102d0565b6001600160a01b0382166105e65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600082610654858461093a565b14949350505050565b6001600160a01b0382166106b35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016102d0565b80600260008282546106c59190610bb3565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600061072884846104f8565b9050600019811461079057818110156107835760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016102d0565b6107908484848403610523565b50505050565b6001600160a01b0383166107fa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102d0565b6001600160a01b03821661085c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102d0565b6001600160a01b038316600090815260208190526040902054818110156108d45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102d0565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610790565b600081815b845181101561097f5761096b8286838151811061095e5761095e610bc6565b6020026020010151610987565b91508061097781610bdc565b91505061093f565b509392505050565b60008183106109a35760008281526020849052604090206109b2565b60008381526020839052604090205b9392505050565b600060208083528351808285015260005b818110156109e6578581018301518582016040015282016109ca565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a1e57600080fd5b919050565b60008060408385031215610a3657600080fd5b610a3f83610a07565b946020939093013593505050565b60008060008060608587031215610a6357600080fd5b843567ffffffffffffffff80821115610a7b57600080fd5b818701915087601f830112610a8f57600080fd5b813581811115610a9e57600080fd5b8860208260051b8501011115610ab357600080fd5b602092830196509450610ac99187019050610a07565b9396929550929360400135925050565b600080600060608486031215610aee57600080fd5b610af784610a07565b9250610b0560208501610a07565b9150604084013590509250925092565b600060208284031215610b2757600080fd5b6109b282610a07565b60008060408385031215610b4357600080fd5b610b4c83610a07565b9150610b5a60208401610a07565b90509250929050565b600181811c90821680610b7757607f821691505b602082108103610b9757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561026457610264610b9d565b634e487b7160e01b600052603260045260246000fd5b600060018201610bee57610bee610b9d565b506001019056fea2646970667358221220393a1322eba7426e858ce57fe47db6a0f2e857ae092a6e0defdd137de394540564736f6c63430008130033",
    "sourceMap": "182:988:23:-:0;;;250:103;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1980:113:18;;;;;;;;;;;;;-1:-1:-1;;;1980:113:18;;;;;;;;;;;;;;;;-1:-1:-1;;;1980:113:18;;;2054:5;2046;:13;;;;;;:::i;:::-;-1:-1:-1;2069:7:18;:17;2079:7;2069;:17;:::i;:::-;-1:-1:-1;;;322:10:23::1;:24:::0;182:988;;14:184:25;84:6;137:2;125:9;116:7;112:23;108:32;105:52;;;153:1;150;143:12;105:52;-1:-1:-1;176:16:25;;14:184;-1:-1:-1;14:184:25:o;203:127::-;264:10;259:3;255:20;252:1;245:31;295:4;292:1;285:15;319:4;316:1;309:15;335:380;414:1;410:12;;;;457;;;478:61;;532:4;524:6;520:17;510:27;;478:61;585:2;577:6;574:14;554:18;551:38;548:161;;631:10;626:3;622:20;619:1;612:31;666:4;663:1;656:15;694:4;691:1;684:15;548:161;;335:380;;;:::o;846:545::-;948:2;943:3;940:11;937:448;;;984:1;1009:5;1005:2;998:17;1054:4;1050:2;1040:19;1124:2;1112:10;1108:19;1105:1;1101:27;1095:4;1091:38;1160:4;1148:10;1145:20;1142:47;;;-1:-1:-1;1183:4:25;1142:47;1238:2;1233:3;1229:12;1226:1;1222:20;1216:4;1212:31;1202:41;;1293:82;1311:2;1304:5;1301:13;1293:82;;;1356:17;;;1337:1;1326:13;1293:82;;;1297:3;;;937:448;846:545;;;:::o;1567:1352::-;1687:10;;-1:-1:-1;;;;;1709:30:25;;1706:56;;;1742:18;;:::i;:::-;1771:97;1861:6;1821:38;1853:4;1847:11;1821:38;:::i;:::-;1815:4;1771:97;:::i;:::-;1923:4;;1987:2;1976:14;;2004:1;1999:663;;;;2706:1;2723:6;2720:89;;;-1:-1:-1;2775:19:25;;;2769:26;2720:89;-1:-1:-1;;1524:1:25;1520:11;;;1516:24;1512:29;1502:40;1548:1;1544:11;;;1499:57;2822:81;;1969:944;;1999:663;793:1;786:14;;;830:4;817:18;;-1:-1:-1;;2035:20:25;;;2153:236;2167:7;2164:1;2161:14;2153:236;;;2256:19;;;2250:26;2235:42;;2348:27;;;;2316:1;2304:14;;;;2183:19;;2153:236;;;2157:3;2417:6;2408:7;2405:19;2402:201;;;2478:19;;;2472:26;-1:-1:-1;;2561:1:25;2557:14;;;2573:3;2553:24;2549:37;2545:42;2530:58;2515:74;;2402:201;-1:-1:-1;;;;;2649:1:25;2633:14;;;2629:22;2616:36;;-1:-1:-1;1567:1352:25:o;:::-;182:988:23;;;;;;",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c80633950935111610071578063395093511461014157806370a082311461015457806395d89b411461017d578063a457c2d714610185578063a9059cbb14610198578063dd62ed3e146101ab57600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa5780632049d7a11461010c57806323b872dd1461011f578063313ce56714610132575b600080fd5b6100c16101be565b6040516100ce91906109b9565b60405180910390f35b6100ea6100e5366004610a23565b610250565b60405190151581526020016100ce565b6002545b6040519081526020016100ce565b6100ea61011a366004610a4d565b61026a565b6100ea61012d366004610ad9565b61041a565b604051601281526020016100ce565b6100ea61014f366004610a23565b61043e565b6100fe610162366004610b15565b6001600160a01b031660009081526020819052604090205490565b6100c1610460565b6100ea610193366004610a23565b61046f565b6100ea6101a6366004610a23565b6104ea565b6100fe6101b9366004610b30565b6104f8565b6060600380546101cd90610b63565b80601f01602080910402602001604051908101604052809291908181526020018280546101f990610b63565b80156102465780601f1061021b57610100808354040283529160200191610246565b820191906000526020600020905b81548152906001019060200180831161022957829003601f168201915b5050505050905090565b60003361025e818585610523565b60019150505b92915050565b6001600160a01b03821660009081526006602052604081205460ff16156102d95760405163032108ed60e21b815260206004820152601960248201527f596f75206861766520616c726561647920636c61696d6564210000000000000060448201526064015b60405180910390fd5b6040516bffffffffffffffffffffffff19606085901b1660208201526034810183905260009060540160405160208183030381529060405280519060200120905061035b868680806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250506005549150849050610647565b9150816103ab57604051635835ed1d60e01b815260206004820181905260248201527f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f6660448201526064016102d0565b6103b5848461065d565b6001600160a01b038416600081815260066020908152604091829020805460ff19166001179055815192835282018590527f650e45f04ef8a0c267b2f78d983913f69ae3a353b2b32de5429307522be0ab55910160405180910390a150949350505050565b60003361042885828561071c565b610433858585610796565b506001949350505050565b60003361025e81858561045183836104f8565b61045b9190610bb3565b610523565b6060600480546101cd90610b63565b6000338161047d82866104f8565b9050838110156104dd5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016102d0565b6104338286868403610523565b60003361025e818585610796565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6001600160a01b0383166105855760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016102d0565b6001600160a01b0382166105e65760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016102d0565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600082610654858461093a565b14949350505050565b6001600160a01b0382166106b35760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016102d0565b80600260008282546106c59190610bb3565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b600061072884846104f8565b9050600019811461079057818110156107835760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016102d0565b6107908484848403610523565b50505050565b6001600160a01b0383166107fa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016102d0565b6001600160a01b03821661085c5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016102d0565b6001600160a01b038316600090815260208190526040902054818110156108d45760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016102d0565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610790565b600081815b845181101561097f5761096b8286838151811061095e5761095e610bc6565b6020026020010151610987565b91508061097781610bdc565b91505061093f565b509392505050565b60008183106109a35760008281526020849052604090206109b2565b60008381526020839052604090205b9392505050565b600060208083528351808285015260005b818110156109e6578581018301518582016040015282016109ca565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610a1e57600080fd5b919050565b60008060408385031215610a3657600080fd5b610a3f83610a07565b946020939093013593505050565b60008060008060608587031215610a6357600080fd5b843567ffffffffffffffff80821115610a7b57600080fd5b818701915087601f830112610a8f57600080fd5b813581811115610a9e57600080fd5b8860208260051b8501011115610ab357600080fd5b602092830196509450610ac99187019050610a07565b9396929550929360400135925050565b600080600060608486031215610aee57600080fd5b610af784610a07565b9250610b0560208501610a07565b9150604084013590509250925092565b600060208284031215610b2757600080fd5b6109b282610a07565b60008060408385031215610b4357600080fd5b610b4c83610a07565b9150610b5a60208401610a07565b90509250929050565b600181811c90821680610b7757607f821691505b602082108103610b9757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b8082018082111561026457610264610b9d565b634e487b7160e01b600052603260045260246000fd5b600060018201610bee57610bee610b9d565b506001019056fea2646970667358221220393a1322eba7426e858ce57fe47db6a0f2e857ae092a6e0defdd137de394540564736f6c63430008130033",
    "sourceMap": "182:988:23:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98:18;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4444:197;;;;;;:::i;:::-;;:::i;:::-;;;1169:14:25;;1162:22;1144:41;;1132:2;1117:18;4444:197:18;1004:187:25;3255:106:18;3342:12;;3255:106;;;1342:25:25;;;1330:2;1315:18;3255:106:18;1196:177:25;543:625:23;;;;;;:::i;:::-;;:::i;5203:256:18:-;;;;;;:::i;:::-;;:::i;3104:91::-;;;3186:2;2621:36:25;;2609:2;2594:18;3104:91:18;2479:184:25;5854:234:18;;;;;;:::i;:::-;;:::i;3419:125::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3519:18:18;3493:7;3519:18;;;;;;;;;;;;3419:125;2369:102;;;:::i;6575:427::-;;;;;;:::i;:::-;;:::i;3740:189::-;;;;;;:::i;:::-;;:::i;3987:149::-;;;;;;:::i;:::-;;:::i;2158:98::-;2212:13;2244:5;2237:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2158:98;:::o;4444:197::-;4527:4;719:10:21;4581:32:18;719:10:21;4597:7:18;4606:6;4581:8;:32::i;:::-;4630:4;4623:11;;;4444:197;;;;;:::o;543:625:23:-;-1:-1:-1;;;;;708:19:23;;680:12;708:19;;;:10;:19;;;;;;;;704:98;;;748:54;;-1:-1:-1;;;748:54:23;;3711:2:25;748:54:23;;;3693:21:25;3750:2;3730:18;;;3723:30;3789:27;3769:18;;;3762:55;3834:18;;748:54:23;;;;;;;;704:98;838:34;;-1:-1:-1;;4040:2:25;4036:15;;;4032:53;838:34:23;;;4020:66:25;4102:12;;;4095:28;;;813:12:23;;4139::25;;838:34:23;;;;;;;;;;;;828:45;;;;;;813:60;;894:50;913:12;;894:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;927:10:23;;;-1:-1:-1;939:4:23;;-1:-1:-1;894:18:23;:50::i;:::-;884:60;;960:7;955:88;;988:55;;-1:-1:-1;;;988:55:23;;4364:2:25;988:55:23;;;4346:21:25;;;4383:18;;;4376:30;4442:34;4422:18;;;4415:62;4494:18;;988:55:23;4162:356:25;955:88:23;1054:23;1060:7;1069;1054:5;:23::i;:::-;-1:-1:-1;;;;;1087:19:23;;;;;;:10;:19;;;;;;;;;:26;;-1:-1:-1;;1087:26:23;1109:4;1087:26;;;1129:32;;4697:51:25;;;4764:18;;4757:34;;;1129:32:23;;4670:18:25;1129:32:23;;;;;;;694:474;543:625;;;;;;:::o;5203:256:18:-;5300:4;719:10:21;5356:38:18;5372:4;719:10:21;5387:6:18;5356:15;:38::i;:::-;5404:27;5414:4;5420:2;5424:6;5404:9;:27::i;:::-;-1:-1:-1;5448:4:18;;5203:256;-1:-1:-1;;;;5203:256:18:o;5854:234::-;5942:4;719:10:21;5996:64:18;719:10:21;6012:7:18;6049:10;6021:25;719:10:21;6012:7:18;6021:9;:25::i;:::-;:38;;;;:::i;:::-;5996:8;:64::i;2369:102::-;2425:13;2457:7;2450:14;;;;;:::i;6575:427::-;6668:4;719:10:21;6668:4:18;6749:25;719:10:21;6766:7:18;6749:9;:25::i;:::-;6722:52;;6812:15;6792:16;:35;;6784:85;;;;-1:-1:-1;;;6784:85:18;;5266:2:25;6784:85:18;;;5248:21:25;5305:2;5285:18;;;5278:30;5344:34;5324:18;;;5317:62;-1:-1:-1;;;5395:18:25;;;5388:35;5440:19;;6784:85:18;5064:401:25;6784:85:18;6903:60;6912:5;6919:7;6947:15;6928:16;:34;6903:8;:60::i;3740:189::-;3819:4;719:10:21;3873:28:18;719:10:21;3890:2:18;3894:6;3873:9;:28::i;3987:149::-;-1:-1:-1;;;;;4102:18:18;;;4076:7;4102:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;3987:149::o;10457:340::-;-1:-1:-1;;;;;10558:19:18;;10550:68;;;;-1:-1:-1;;;10550:68:18;;5672:2:25;10550:68:18;;;5654:21:25;5711:2;5691:18;;;5684:30;5750:34;5730:18;;;5723:62;-1:-1:-1;;;5801:18:25;;;5794:34;5845:19;;10550:68:18;5470:400:25;10550:68:18;-1:-1:-1;;;;;10636:21:18;;10628:68;;;;-1:-1:-1;;;10628:68:18;;6077:2:25;10628:68:18;;;6059:21:25;6116:2;6096:18;;;6089:30;6155:34;6135:18;;;6128:62;-1:-1:-1;;;6206:18:25;;;6199:32;6248:19;;10628:68:18;5875:398:25;10628:68:18;-1:-1:-1;;;;;10707:18:18;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;10758:32;;1342:25:25;;;10758:32:18;;1315:18:25;10758:32:18;;;;;;;10457:340;;;:::o;1156:154:22:-;1247:4;1299;1270:25;1283:5;1290:4;1270:12;:25::i;:::-;:33;;1156:154;-1:-1:-1;;;;1156:154:22:o;8520:535:18:-;-1:-1:-1;;;;;8603:21:18;;8595:65;;;;-1:-1:-1;;;8595:65:18;;6480:2:25;8595:65:18;;;6462:21:25;6519:2;6499:18;;;6492:30;6558:33;6538:18;;;6531:61;6609:18;;8595:65:18;6278:355:25;8595:65:18;8747:6;8731:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;8899:18:18;;:9;:18;;;;;;;;;;;:28;;;;;;8952:37;1342:25:25;;;8952:37:18;;1315:18:25;8952:37:18;;;;;;;8520:535;;:::o;11078:411::-;11178:24;11205:25;11215:5;11222:7;11205:9;:25::i;:::-;11178:52;;-1:-1:-1;;11244:16:18;:37;11240:243;;11325:6;11305:16;:26;;11297:68;;;;-1:-1:-1;;;11297:68:18;;6840:2:25;11297:68:18;;;6822:21:25;6879:2;6859:18;;;6852:30;6918:31;6898:18;;;6891:59;6967:18;;11297:68:18;6638:353:25;11297:68:18;11407:51;11416:5;11423:7;11451:6;11432:16;:25;11407:8;:51::i;:::-;11168:321;11078:411;;;:::o;7456:788::-;-1:-1:-1;;;;;7552:18:18;;7544:68;;;;-1:-1:-1;;;7544:68:18;;7198:2:25;7544:68:18;;;7180:21:25;7237:2;7217:18;;;7210:30;7276:34;7256:18;;;7249:62;-1:-1:-1;;;7327:18:25;;;7320:35;7372:19;;7544:68:18;6996:401:25;7544:68:18;-1:-1:-1;;;;;7630:16:18;;7622:64;;;;-1:-1:-1;;;7622:64:18;;7604:2:25;7622:64:18;;;7586:21:25;7643:2;7623:18;;;7616:30;7682:34;7662:18;;;7655:62;-1:-1:-1;;;7733:18:25;;;7726:33;7776:19;;7622:64:18;7402:399:25;7622:64:18;-1:-1:-1;;;;;7768:15:18;;7746:19;7768:15;;;;;;;;;;;7801:21;;;;7793:72;;;;-1:-1:-1;;;7793:72:18;;8008:2:25;7793:72:18;;;7990:21:25;8047:2;8027:18;;;8020:30;8086:34;8066:18;;;8059:62;-1:-1:-1;;;8137:18:25;;;8130:36;8183:19;;7793:72:18;7806:402:25;7793:72:18;-1:-1:-1;;;;;7899:15:18;;;:9;:15;;;;;;;;;;;7917:20;;;7899:38;;8114:13;;;;;;;;;;:23;;;;;;8163:26;;1342:25:25;;;8114:13:18;;8163:26;;1315:18:25;8163:26:18;;;;;;;8200:37;12073:91;1934:290:22;2017:7;2059:4;2017:7;2073:116;2097:5;:12;2093:1;:16;2073:116;;;2145:33;2155:12;2169:5;2175:1;2169:8;;;;;;;;:::i;:::-;;;;;;;2145:9;:33::i;:::-;2130:48;-1:-1:-1;2111:3:22;;;;:::i;:::-;;;;2073:116;;;-1:-1:-1;2205:12:22;1934:290;-1:-1:-1;;;1934:290:22:o;9205:147::-;9268:7;9298:1;9294;:5;:51;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9294:51;;;9426:13;9517:15;;;9552:4;9545:15;;;9598:4;9582:21;;9302:20;9287:58;9205:147;-1:-1:-1;;;9205:147:22:o;14:548:25:-;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;298:3;483:1;478:2;469:6;458:9;454:22;450:31;443:42;553:2;546;542:7;537:2;529:6;525:15;521:29;510:9;506:45;502:54;494:62;;;;14:548;;;;:::o;567:173::-;635:20;;-1:-1:-1;;;;;684:31:25;;674:42;;664:70;;730:1;727;720:12;664:70;567:173;;;:::o;745:254::-;813:6;821;874:2;862:9;853:7;849:23;845:32;842:52;;;890:1;887;880:12;842:52;913:29;932:9;913:29;:::i;:::-;903:39;989:2;974:18;;;;961:32;;-1:-1:-1;;;745:254:25:o;1378:763::-;1482:6;1490;1498;1506;1559:2;1547:9;1538:7;1534:23;1530:32;1527:52;;;1575:1;1572;1565:12;1527:52;1615:9;1602:23;1644:18;1685:2;1677:6;1674:14;1671:34;;;1701:1;1698;1691:12;1671:34;1739:6;1728:9;1724:22;1714:32;;1784:7;1777:4;1773:2;1769:13;1765:27;1755:55;;1806:1;1803;1796:12;1755:55;1846:2;1833:16;1872:2;1864:6;1861:14;1858:34;;;1888:1;1885;1878:12;1858:34;1943:7;1936:4;1926:6;1923:1;1919:14;1915:2;1911:23;1907:34;1904:47;1901:67;;;1964:1;1961;1954:12;1901:67;1995:4;1987:13;;;;-1:-1:-1;2019:6:25;-1:-1:-1;2044:40:25;;2063:20;;;-1:-1:-1;2044:40:25;:::i;:::-;1378:763;;;;-1:-1:-1;2034:50:25;;2131:2;2116:18;2103:32;;-1:-1:-1;;1378:763:25:o;2146:328::-;2223:6;2231;2239;2292:2;2280:9;2271:7;2267:23;2263:32;2260:52;;;2308:1;2305;2298:12;2260:52;2331:29;2350:9;2331:29;:::i;:::-;2321:39;;2379:38;2413:2;2402:9;2398:18;2379:38;:::i;:::-;2369:48;;2464:2;2453:9;2449:18;2436:32;2426:42;;2146:328;;;;;:::o;2668:186::-;2727:6;2780:2;2768:9;2759:7;2755:23;2751:32;2748:52;;;2796:1;2793;2786:12;2748:52;2819:29;2838:9;2819:29;:::i;2859:260::-;2927:6;2935;2988:2;2976:9;2967:7;2963:23;2959:32;2956:52;;;3004:1;3001;2994:12;2956:52;3027:29;3046:9;3027:29;:::i;:::-;3017:39;;3075:38;3109:2;3098:9;3094:18;3075:38;:::i;:::-;3065:48;;2859:260;;;;;:::o;3124:380::-;3203:1;3199:12;;;;3246;;;3267:61;;3321:4;3313:6;3309:17;3299:27;;3267:61;3374:2;3366:6;3363:14;3343:18;3340:38;3337:161;;3420:10;3415:3;3411:20;3408:1;3401:31;3455:4;3452:1;3445:15;3483:4;3480:1;3473:15;3337:161;;3124:380;;;:::o;4802:127::-;4863:10;4858:3;4854:20;4851:1;4844:31;4894:4;4891:1;4884:15;4918:4;4915:1;4908:15;4934:125;4999:9;;;5020:10;;;5017:36;;;5033:18;;:::i;8213:127::-;8274:10;8269:3;8265:20;8262:1;8255:31;8305:4;8302:1;8295:15;8329:4;8326:1;8319:15;8345:135;8384:3;8405:17;;;8402:43;;8425:18;;:::i;:::-;-1:-1:-1;8472:1:25;8461:13;;8345:135::o",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "allowance(address,address)": "dd62ed3e",
    "approve(address,uint256)": "095ea7b3",
    "balanceOf(address)": "70a08231",
    "claimAirdrop(bytes32[],address,uint256)": "2049d7a1",
    "decimals()": "313ce567",
    "decreaseAllowance(address,uint256)": "a457c2d7",
    "increaseAllowance(address,uint256)": "39509351",
    "name()": "06fdde03",
    "symbol()": "95d89b41",
    "totalSupply()": "18160ddd",
    "transfer(address,uint256)": "a9059cbb",
    "transferFrom(address,address,uint256)": "23b872dd"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_merkleRoot\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"AlreadyClaimed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"InvalidProofForUser\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AirdropClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"address\",\"name\":\"claimer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"claimAirdrop\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MerkleProofAirdrop.sol\":\"MerkleProofAirdrop\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@openzeppelin/=node_modules/@openzeppelin/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"keccak256\":\"0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15\",\"dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5\",\"dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53\"]},\"node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd\",\"dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8\"]},\"node_modules/@openzeppelin/contracts/utils/Context.sol\":{\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92\",\"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3\"]},\"node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"keccak256\":\"0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04\",\"dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG\"]},\"src/MerkleProofAirdrop.sol\":{\"keccak256\":\"0xe54f7e20a04b353bfdae3387c8280e926a24e5ac51805b90e5e4b5e3257308e9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9edc78ce38c503f2239797d39202acd1a274ba9430f034cef5a2a01c647fa96e\",\"dweb:/ipfs/QmTAzYoEhYS6HNDWSxtj2QEkJ8JFMfRYwDhZeb2PaAqLcm\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.19+commit.7dd6d404"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_merkleRoot",
              "type": "bytes32"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "message",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "AlreadyClaimed"
        },
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "type": "error",
          "name": "InvalidProofForUser"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "AirdropClaimed",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Approval",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address",
              "indexed": true
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Transfer",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "allowance",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "approve",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32[]",
              "name": "_merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "address",
              "name": "claimer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "claimAirdrop",
          "outputs": [
            {
              "internalType": "bool",
              "name": "success",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "decimals",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "subtractedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "decreaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "spender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "addedValue",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "increaseAllowance",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transfer",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "transferFrom",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "allowance(address,address)": {
            "details": "See {IERC20-allowance}."
          },
          "approve(address,uint256)": {
            "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
          },
          "balanceOf(address)": {
            "details": "See {IERC20-balanceOf}."
          },
          "decimals()": {
            "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
          },
          "decreaseAllowance(address,uint256)": {
            "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
          },
          "increaseAllowance(address,uint256)": {
            "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
          },
          "name()": {
            "details": "Returns the name of the token."
          },
          "symbol()": {
            "details": "Returns the symbol of the token, usually a shorter version of the name."
          },
          "totalSupply()": {
            "details": "See {IERC20-totalSupply}."
          },
          "transfer(address,uint256)": {
            "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@openzeppelin/=node_modules/@openzeppelin/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "eth-gas-reporter/=node_modules/eth-gas-reporter/",
        "forge-std/=lib/forge-std/src/",
        "hardhat/=node_modules/hardhat/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "src/MerkleProofAirdrop.sol": "MerkleProofAirdrop"
      },
      "libraries": {}
    },
    "sources": {
      "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol": {
        "keccak256": "0xa56ca923f70c1748830700250b19c61b70db9a683516dc5e216694a50445d99c",
        "urls": [
          "bzz-raw://cac938788bc4be12101e59d45588b4e059579f4e61062e1cda8d6b06c0191b15",
          "dweb:/ipfs/QmV2JKCyjTVH3rkWNrfdJRhAT7tZ3usAN2XcnD4h53Mvih"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305",
        "urls": [
          "bzz-raw://bd39944e8fc06be6dbe2dd1d8449b5336e23c6a7ba3e8e9ae5ae0f37f35283f5",
          "dweb:/ipfs/QmPV3FGYjVwvKSgAXKUN3r9T9GwniZz83CxBpM7vyj2G53"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
        "keccak256": "0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca",
        "urls": [
          "bzz-raw://5a376d3dda2cb70536c0a45c208b29b34ac560c4cb4f513a42079f96ba47d2dd",
          "dweb:/ipfs/QmZQg6gn1sUpM8wHzwNvSnihumUCAhxD119MpXeKp8B9s8"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/Context.sol": {
        "keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
        "urls": [
          "bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
          "dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
        ],
        "license": "MIT"
      },
      "node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
        "keccak256": "0xcf688741f79f4838d5301dcf72d0af9eff11bbab6ab0bb112ad144c7fb672dac",
        "urls": [
          "bzz-raw://85d9c87a481fe99fd28a146c205da0867ef7e1b7edbe0036abc86d2e64eb1f04",
          "dweb:/ipfs/QmR7m1zWQNfZHUKTtqnjoCjCBbNFcjCxV27rxf6iMfhVtG"
        ],
        "license": "MIT"
      },
      "src/MerkleProofAirdrop.sol": {
        "keccak256": "0xe54f7e20a04b353bfdae3387c8280e926a24e5ac51805b90e5e4b5e3257308e9",
        "urls": [
          "bzz-raw://9edc78ce38c503f2239797d39202acd1a274ba9430f034cef5a2a01c647fa96e",
          "dweb:/ipfs/QmTAzYoEhYS6HNDWSxtj2QEkJ8JFMfRYwDhZeb2PaAqLcm"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "src/MerkleProofAirdrop.sol",
    "id": 44693,
    "exportedSymbols": {
      "Context": [
        44060
      ],
      "ERC20": [
        43935
      ],
      "IERC20": [
        44013
      ],
      "IERC20Metadata": [
        44038
      ],
      "MerkleProof": [
        44588
      ],
      "MerkleProofAirdrop": [
        44692
      ]
    },
    "nodeType": "SourceUnit",
    "src": "32:1139:23",
    "nodes": [
      {
        "id": 44590,
        "nodeType": "PragmaDirective",
        "src": "32:23:23",
        "nodes": [],
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ]
      },
      {
        "id": 44591,
        "nodeType": "ImportDirective",
        "src": "56:55:23",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "file": "@openzeppelin/contracts/token/ERC20/ERC20.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 44693,
        "sourceUnit": 43936,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 44592,
        "nodeType": "ImportDirective",
        "src": "112:68:23",
        "nodes": [],
        "absolutePath": "node_modules/@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
        "file": "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 44693,
        "sourceUnit": 44589,
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "id": 44692,
        "nodeType": "ContractDefinition",
        "src": "182:988:23",
        "nodes": [
          {
            "id": 44596,
            "nodeType": "VariableDeclaration",
            "src": "225:18:23",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "merkleRoot",
            "nameLocation": "233:10:23",
            "scope": 44692,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 44595,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "225:7:23",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "internal"
          },
          {
            "id": 44610,
            "nodeType": "FunctionDefinition",
            "src": "250:103:23",
            "nodes": [],
            "body": {
              "id": 44609,
              "nodeType": "Block",
              "src": "312:41:23",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 44607,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 44605,
                      "name": "merkleRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44596,
                      "src": "322:10:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 44606,
                      "name": "_merkleRoot",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44598,
                      "src": "335:11:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "src": "322:24:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "id": 44608,
                  "nodeType": "ExpressionStatement",
                  "src": "322:24:23"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [
              {
                "arguments": [
                  {
                    "hexValue": "427269646765576174657273",
                    "id": 44601,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "289:14:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_4d0bf515bb2f78717471519cb43001b36582047476ae658000c8ff2736ff95bc",
                      "typeString": "literal_string \"BridgeWaters\""
                    },
                    "value": "BridgeWaters"
                  },
                  {
                    "hexValue": "425753",
                    "id": 44602,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": true,
                    "kind": "string",
                    "lValueRequested": false,
                    "nodeType": "Literal",
                    "src": "305:5:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_stringliteral_39b414820587951124d166b4ecaac33ae82fd29adc1bd04532ba81ff274fc8a5",
                      "typeString": "literal_string \"BWS\""
                    },
                    "value": "BWS"
                  }
                ],
                "id": 44603,
                "kind": "baseConstructorSpecifier",
                "modifierName": {
                  "id": 44600,
                  "name": "ERC20",
                  "nameLocations": [
                    "283:5:23"
                  ],
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 43935,
                  "src": "283:5:23"
                },
                "nodeType": "ModifierInvocation",
                "src": "283:28:23"
              }
            ],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 44599,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44598,
                  "mutability": "mutable",
                  "name": "_merkleRoot",
                  "nameLocation": "270:11:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44610,
                  "src": "262:19:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  },
                  "typeName": {
                    "id": 44597,
                    "name": "bytes32",
                    "nodeType": "ElementaryTypeName",
                    "src": "262:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "261:21:23"
            },
            "returnParameters": {
              "id": 44604,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "312:0:23"
            },
            "scope": 44692,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "id": 44614,
            "nodeType": "VariableDeclaration",
            "src": "359:35:23",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "hasClaimed",
            "nameLocation": "384:10:23",
            "scope": 44692,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
              "typeString": "mapping(address => bool)"
            },
            "typeName": {
              "id": 44613,
              "keyName": "",
              "keyNameLocation": "-1:-1:-1",
              "keyType": {
                "id": 44611,
                "name": "address",
                "nodeType": "ElementaryTypeName",
                "src": "367:7:23",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                }
              },
              "nodeType": "Mapping",
              "src": "359:24:23",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                "typeString": "mapping(address => bool)"
              },
              "valueName": "",
              "valueNameLocation": "-1:-1:-1",
              "valueType": {
                "id": 44612,
                "name": "bool",
                "nodeType": "ElementaryTypeName",
                "src": "378:4:23",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 44620,
            "nodeType": "EventDefinition",
            "src": "401:54:23",
            "nodes": [],
            "anonymous": false,
            "eventSelector": "650e45f04ef8a0c267b2f78d983913f69ae3a353b2b32de5429307522be0ab55",
            "name": "AirdropClaimed",
            "nameLocation": "407:14:23",
            "parameters": {
              "id": 44619,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44616,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "account",
                  "nameLocation": "430:7:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44620,
                  "src": "422:15:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44615,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "422:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44618,
                  "indexed": false,
                  "mutability": "mutable",
                  "name": "amount",
                  "nameLocation": "447:6:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44620,
                  "src": "439:14:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44617,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "439:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "421:33:23"
            }
          },
          {
            "id": 44624,
            "nodeType": "ErrorDefinition",
            "src": "461:37:23",
            "nodes": [],
            "errorSelector": "0c8423b4",
            "name": "AlreadyClaimed",
            "nameLocation": "467:14:23",
            "parameters": {
              "id": 44623,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44622,
                  "mutability": "mutable",
                  "name": "message",
                  "nameLocation": "489:7:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44624,
                  "src": "482:14:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 44621,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "482:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "481:16:23"
            }
          },
          {
            "id": 44628,
            "nodeType": "ErrorDefinition",
            "src": "503:34:23",
            "nodes": [],
            "errorSelector": "5835ed1d",
            "name": "InvalidProofForUser",
            "nameLocation": "509:19:23",
            "parameters": {
              "id": 44627,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44626,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 44628,
                  "src": "529:6:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 44625,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "529:6:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "528:8:23"
            }
          },
          {
            "id": 44691,
            "nodeType": "FunctionDefinition",
            "src": "543:625:23",
            "nodes": [],
            "body": {
              "id": 44690,
              "nodeType": "Block",
              "src": "694:474:23",
              "nodes": [],
              "statements": [
                {
                  "condition": {
                    "baseExpression": {
                      "id": 44640,
                      "name": "hasClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44614,
                      "src": "708:10:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                        "typeString": "mapping(address => bool)"
                      }
                    },
                    "id": 44642,
                    "indexExpression": {
                      "id": 44641,
                      "name": "claimer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44633,
                      "src": "719:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "isConstant": false,
                    "isLValue": true,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "IndexAccess",
                    "src": "708:19:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 44647,
                  "nodeType": "IfStatement",
                  "src": "704:98:23",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "hexValue": "596f75206861766520616c726561647920636c61696d656421",
                          "id": 44644,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "773:27:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_1ef7a1763503e7a194cb75c0249bd532c552f94531926ce405e8931ecf660e6c",
                            "typeString": "literal_string \"You have already claimed!\""
                          },
                          "value": "You have already claimed!"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_1ef7a1763503e7a194cb75c0249bd532c552f94531926ce405e8931ecf660e6c",
                            "typeString": "literal_string \"You have already claimed!\""
                          }
                        ],
                        "id": 44643,
                        "name": "AlreadyClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44624,
                        "src": "748:14:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
                          "typeString": "function (string memory) pure"
                        }
                      },
                      "id": 44645,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [
                        "764:7:23"
                      ],
                      "names": [
                        "message"
                      ],
                      "nodeType": "FunctionCall",
                      "src": "748:54:23",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 44646,
                    "nodeType": "RevertStatement",
                    "src": "741:61:23"
                  }
                },
                {
                  "assignments": [
                    44649
                  ],
                  "declarations": [
                    {
                      "constant": false,
                      "id": 44649,
                      "mutability": "mutable",
                      "name": "node",
                      "nameLocation": "821:4:23",
                      "nodeType": "VariableDeclaration",
                      "scope": 44690,
                      "src": "813:12:23",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 44648,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "813:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "visibility": "internal"
                    }
                  ],
                  "id": 44657,
                  "initialValue": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "id": 44653,
                            "name": "claimer",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44633,
                            "src": "855:7:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "id": 44654,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 44635,
                            "src": "864:7:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "id": 44651,
                            "name": "abi",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": -1,
                            "src": "838:3:23",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_abi",
                              "typeString": "abi"
                            }
                          },
                          "id": 44652,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberLocation": "842:12:23",
                          "memberName": "encodePacked",
                          "nodeType": "MemberAccess",
                          "src": "838:16:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                            "typeString": "function () pure returns (bytes memory)"
                          }
                        },
                        "id": 44655,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "nameLocations": [],
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "838:34:23",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      ],
                      "id": 44650,
                      "name": "keccak256",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": -8,
                      "src": "828:9:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                        "typeString": "function (bytes memory) pure returns (bytes32)"
                      }
                    },
                    "id": 44656,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "828:45:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bytes32",
                      "typeString": "bytes32"
                    }
                  },
                  "nodeType": "VariableDeclarationStatement",
                  "src": "813:60:23"
                },
                {
                  "expression": {
                    "id": 44665,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 44658,
                      "name": "success",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44638,
                      "src": "884:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 44661,
                          "name": "_merkleProof",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44631,
                          "src": "913:12:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                            "typeString": "bytes32[] calldata"
                          }
                        },
                        {
                          "id": 44662,
                          "name": "merkleRoot",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44596,
                          "src": "927:10:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        {
                          "id": 44663,
                          "name": "node",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44649,
                          "src": "939:4:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                            "typeString": "bytes32[] calldata"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        ],
                        "expression": {
                          "id": 44659,
                          "name": "MerkleProof",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 44588,
                          "src": "894:11:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_MerkleProof_$44588_$",
                            "typeString": "type(library MerkleProof)"
                          }
                        },
                        "id": 44660,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberLocation": "906:6:23",
                        "memberName": "verify",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 44084,
                        "src": "894:18:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_pure$_t_array$_t_bytes32_$dyn_memory_ptr_$_t_bytes32_$_t_bytes32_$returns$_t_bool_$",
                          "typeString": "function (bytes32[] memory,bytes32,bytes32) pure returns (bool)"
                        }
                      },
                      "id": 44664,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "894:50:23",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "src": "884:60:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 44666,
                  "nodeType": "ExpressionStatement",
                  "src": "884:60:23"
                },
                {
                  "condition": {
                    "id": 44668,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "959:8:23",
                    "subExpression": {
                      "id": 44667,
                      "name": "success",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44638,
                      "src": "960:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 44673,
                  "nodeType": "IfStatement",
                  "src": "955:88:23",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [
                        {
                          "hexValue": "4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f66",
                          "id": 44670,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1008:34:23",
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_f69ca634649e21165ef7acf2353526689f62f3e0c41b4eb68e7ae3966b1f0808",
                            "typeString": "literal_string \"MerkleDistributor: Invalid proof\""
                          },
                          "value": "MerkleDistributor: Invalid proof"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_f69ca634649e21165ef7acf2353526689f62f3e0c41b4eb68e7ae3966b1f0808",
                            "typeString": "literal_string \"MerkleDistributor: Invalid proof\""
                          }
                        ],
                        "id": 44669,
                        "name": "InvalidProofForUser",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44628,
                        "src": "988:19:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$_t_string_memory_ptr_$returns$__$",
                          "typeString": "function (string memory) pure"
                        }
                      },
                      "id": 44671,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "988:55:23",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 44672,
                    "nodeType": "RevertStatement",
                    "src": "981:62:23"
                  }
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 44675,
                        "name": "claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44633,
                        "src": "1060:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 44676,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44635,
                        "src": "1069:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 44674,
                      "name": "_mint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 43752,
                      "src": "1054:5:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 44677,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1054:23:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44678,
                  "nodeType": "ExpressionStatement",
                  "src": "1054:23:23"
                },
                {
                  "expression": {
                    "id": 44683,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "baseExpression": {
                        "id": 44679,
                        "name": "hasClaimed",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44614,
                        "src": "1087:10:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                          "typeString": "mapping(address => bool)"
                        }
                      },
                      "id": 44681,
                      "indexExpression": {
                        "id": 44680,
                        "name": "claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44633,
                        "src": "1098:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "isConstant": false,
                      "isLValue": true,
                      "isPure": false,
                      "lValueRequested": true,
                      "nodeType": "IndexAccess",
                      "src": "1087:19:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "hexValue": "74727565",
                      "id": 44682,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "bool",
                      "lValueRequested": false,
                      "nodeType": "Literal",
                      "src": "1109:4:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "value": "true"
                    },
                    "src": "1087:26:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 44684,
                  "nodeType": "ExpressionStatement",
                  "src": "1087:26:23"
                },
                {
                  "eventCall": {
                    "arguments": [
                      {
                        "id": 44686,
                        "name": "claimer",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44633,
                        "src": "1144:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "id": 44687,
                        "name": "_amount",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 44635,
                        "src": "1153:7:23",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      ],
                      "id": 44685,
                      "name": "AirdropClaimed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 44620,
                      "src": "1129:14:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                        "typeString": "function (address,uint256)"
                      }
                    },
                    "id": 44688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1129:32:23",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 44689,
                  "nodeType": "EmitStatement",
                  "src": "1124:37:23"
                }
              ]
            },
            "functionSelector": "2049d7a1",
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "claimAirdrop",
            "nameLocation": "552:12:23",
            "parameters": {
              "id": 44636,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44631,
                  "mutability": "mutable",
                  "name": "_merkleProof",
                  "nameLocation": "593:12:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44691,
                  "src": "574:31:23",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_bytes32_$dyn_calldata_ptr",
                    "typeString": "bytes32[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 44629,
                      "name": "bytes32",
                      "nodeType": "ElementaryTypeName",
                      "src": "574:7:23",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      }
                    },
                    "id": 44630,
                    "nodeType": "ArrayTypeName",
                    "src": "574:9:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
                      "typeString": "bytes32[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44633,
                  "mutability": "mutable",
                  "name": "claimer",
                  "nameLocation": "623:7:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44691,
                  "src": "615:15:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 44632,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "615:7:23",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 44635,
                  "mutability": "mutable",
                  "name": "_amount",
                  "nameLocation": "648:7:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44691,
                  "src": "640:15:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  },
                  "typeName": {
                    "id": 44634,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "640:7:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "564:97:23"
            },
            "returnParameters": {
              "id": 44639,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 44638,
                  "mutability": "mutable",
                  "name": "success",
                  "nameLocation": "685:7:23",
                  "nodeType": "VariableDeclaration",
                  "scope": 44691,
                  "src": "680:12:23",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 44637,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "680:4:23",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "679:14:23"
            },
            "scope": 44692,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 44593,
              "name": "ERC20",
              "nameLocations": [
                "213:5:23"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 43935,
              "src": "213:5:23"
            },
            "id": 44594,
            "nodeType": "InheritanceSpecifier",
            "src": "213:5:23"
          }
        ],
        "canonicalName": "MerkleProofAirdrop",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "linearizedBaseContracts": [
          44692,
          43935,
          44038,
          44013,
          44060
        ],
        "name": "MerkleProofAirdrop",
        "nameLocation": "191:18:23",
        "scope": 44693,
        "usedErrors": [
          44624,
          44628
        ]
      }
    ],
    "license": "MIT"
  },
  "id": 23
}